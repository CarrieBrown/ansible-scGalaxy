<tool id="gatk4_HaplotypeCaller" name="GATK4 HaplotypeCaller" version="1.0.0">
    <description>- Call germline SNPs and indels via local re-assembly of haplotypes</description>
    <requirements>
      <requirement type="package" version="4.2.6.1">gatk4</requirement>
    </requirements>

    <command>
        <![CDATA[
        #set $fasta_file = $fasta_source.fasta_id.fields.path
        ln -s '${fasta_file}.fai' 'input.fasta.fai' &&
        ln -s '$fasta_file' 'input.fasta' &&
          gatk --java-options "-Xms4G -Xmx4G -XX:ParallelGCThreads=2" HaplotypeCaller \
            -I "$INPUT" \
            --output "$OUTPUT" \
            -R 'input.fasta' \
            -ERC GVCF
        ]]>
    </command>
    <inputs>
      <param name="INPUT" type="data" format="bam" label="Recalibrated BAM file" />
      <param name="GENOME" type="select" label="Select reference genome" help="If your genome of interest is not listed, contact the Galaxy team">
        <options from_data_table="fasta_indexes" />
      </param>
    </inputs>
    <outputs>
        <data name="OUTPUT" type="data" format="vcf" label="GVCF file"/>
    </outputs>

    <tests>
    </tests>

    <help>
      **What it does**

      Call germline SNPs and indels via local re-assembly of haplotypes
      The HaplotypeCaller is capable of calling SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region. In other words, whenever the program encounters a region showing signs of variation, it discards the existing mapping information and completely reassembles the reads in that region. This allows the HaplotypeCaller to be more accurate when calling regions that are traditionally difficult to call, for example when they contain different types of variants close to each other. It also makes the HaplotypeCaller much better at calling indels than position-based callers like UnifiedGenotyper.

      In the GVCF workflow used for scalable variant calling in DNA sequence data, HaplotypeCaller runs per-sample to generate an intermediate GVCF (not to be used in final analysis), which can then be used in GenotypeGVCFs for joint genotyping of multiple samples in a very efficient way. The GVCF workflow enables rapid incremental processing of samples as they roll off the sequencer, as well as scaling to very large cohort sizes (e.g. the 92K exomes of ExAC).

      In addition, HaplotypeCaller is able to handle non-diploid organisms as well as pooled experiment data. Note however that the algorithms used to calculate variant likelihoods is not well suited to extreme allele frequencies (relative to ploidy) so its use is not recommended for somatic (cancer) variant discovery. For that purpose, use Mutect2 instead.

      Finally, HaplotypeCaller is also able to correctly handle the splice junctions that make RNAseq a challenge for most variant callers, on the condition that the input read data has previously been processed according to our recommendations as documented here:
      https://software.broadinstitute.org/gatk/documentation/article?id=4067

      How HaplotypeCaller works

      1. Define active regions
      The program determines which regions of the genome it needs to operate on (active regions), based on the presence of evidence for variation.

      2. Determine haplotypes by assembly of the active region
      For each active region, the program builds a De Bruijn-like graph to reassemble the active region and identifies what are the possible haplotypes present in the data. The program then realigns each haplotype against the reference haplotype using the Smith-Waterman algorithm in order to identify potentially variant sites.

      3. Determine likelihoods of the haplotypes given the read data
      For each active region, the program performs a pairwise alignment of each read against each haplotype using the PairHMM algorithm. This produces a matrix of likelihoods of haplotypes given the read data. These likelihoods are then marginalized to obtain the likelihoods of alleles for each potentially variant site given the read data.

      4. Assign sample genotypes
      For each potentially variant site, the program applies Bayes' rule, using the likelihoods of alleles given the read data to calculate the likelihoods of each genotype per sample given the read data observed for that sample. The most likely genotype is then assigned to the sample.

      https://gatk.broadinstitute.org/hc/en-us/articles/5358864757787-HaplotypeCaller

    </help>

</tool>
