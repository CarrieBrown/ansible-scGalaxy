<tool id="ArchR" name="scATAC-seq Error correction" version="1.0.0">
    <description>- correct scATAC-seq barcode error</description>
    <requirements>
      <requirement type="package" version="1.22.1">bioconductor-deseq2</requirement>
      <requirement type="package" version="2.26.2">bioconductor-rhdf5</requirement>
      <requirement type="package" version="1.10.0">bioconductor-tximport</requirement>
      <requirement type="package" version="1.34.1">bioconductor-genomicfeatures</requirement>
      <requirement type="package" version="1.20.2">r-getopt</requirement>
      <requirement type="package" version="0.8.0">r-ggrepel</requirement>
      <requirement type="package" version="3.0.1">r-gplots</requirement>
      <requirement type="package" version="1.0.10">r-pheatmap</requirement>
      <requirement type="package" version="0.2.20">r-rjson</requirement>
    </requirements>

    <command>
        <![CDATA[
        #if $tximport.tximport_selector == 'tximport':
            #if $tximport.mapping_format.mapping_format_selector == 'gtf':
                ln -s '$tximport.mapping_format.gtf_file' mapping.gff &&
            #else:
                ln -s '$tximport.mapping_format.tabular_file' mapping.txt &&
            #end if
        #end if

        ## This is needed for Pulsar to transfer the file
        cat '$__tool_directory__/get_deseq_dataset.R' > /dev/null &&

        #import json
        #import os
        Rscript '${__tool_directory__}/deseq2.R'
            --cores \${GALAXY_SLOTS:-1}
            -o '$deseq_out'
            #if $pdf:
                -p '$plots'
            #end if
            #if $normCounts:
                -n '$counts_out'
            #end if
            #if $normRLog:
                -r '$rlog_out'
            #end if
            #if $normVST:
                -v '$vst_out'
            #end if
            #set $filename_to_element_identifiers = {}
            #set $temp_factor_names = list()
            #for $factor in $select_data.rep_factorName:
                #set $temp_factor = list()
                #for $level in $factor.rep_factorLevel:
                    #set $count_files = list()
                    #if $select_data.how == 'group_tags':
                        #for $group in $level.groups.value:
                            #for $file in $select_data.countsFile.get_datasets_for_group($group):
                                $count_files.append(str($file))
                                $filename_to_element_identifiers.__setitem__(os.path.basename(str($file)),  $file.element_identifier)
                            #end for
                        #end for
                    #else:
                        #for $file in $level.countsFile:
                            $count_files.append(str($file))
                            $filename_to_element_identifiers.__setitem__(os.path.basename(str($file)),  $file.element_identifier)
                        #end for
                    #end if
                    $temp_factor.append( {str($level.factorLevel): $count_files} )
                #end for
                $temp_factor.reverse()
                $temp_factor_names.append([str($factor.factorName), $temp_factor])
            #end for

            $header

            -f '#echo json.dumps(temp_factor_names)#'
            -l '#echo json.dumps(filename_to_element_identifiers)#'
            #if $esf:
                -e $esf
            #end if
            -t $fit_type
            #if $batch_factors:
                --batch_factors '$batch_factors'
            #end if
            #if $outlier_replace_off:
                -a
            #end if
            #if $outlier_filter_off:
                -b
            #end if
            #if $auto_mean_filter_off:
                -c
            #end if
            #if $many_contrasts:
                -m
            #end if
            #if $tximport.tximport_selector == 'tximport':
                -i
                -y $tximport.txtype
                #if $tximport.mapping_format.mapping_format_selector == 'gtf':
                    -x mapping.gff
                #else:
                    -x mapping.txt
                #end if

            #end if
        ]]>
    </command>
    <inputs>
      <param name="input" type="data" format="unsorted.bam" label="Uncorrected BAM file" />
      <param name="barcode_mismatch" type="integer" value="2" min="1" label="Mismatches allowed" />
      <param name="r7_scATAC" type="data" format="tabular" label="r7 scATAC-seq barcodes" />
      <param name="i7_scATAC" type="data" format="tabular" label="i7 scATAC-seq barcodes" />
      <param name="r5_scATAC" type="data" format="tabular" label="r5 scATAC-seq barcodes" />
      <param name="i5_scATAC" type="data" format="tabular" label="i5 scATAC-seq barcodes" />
    </inputs>
    <outputs>
        <data name="output" type="data" format="unsorted.bam"  label="Barcode Error-corrected BAM file"/>
    </outputs>

    <tests>
    </tests>

    <help>
**What it does**

Performs error correction on single-cell ATAC-seq barcodes with user-specified mismatch.
Provided by:
https://raw.githubusercontent.com/epigen-UCSD/snATAC_pipeline/master/bin/scATAC_barcode_err_correct

    </help>

</tool>
